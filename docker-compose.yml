services:
  configserver:
    build:
      context: ./configServerService
      dockerfile: Dockerfile
    ports:
      - "${CONFIG_SERVER_PORT}:${CONFIG_SERVER_PORT}"
    environment:
      CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
      ZIPKIN_SERVER_URL: ${ZIPKIN_SERVER_URL}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${CONFIG_SERVER_PORT}/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-service-discovery:
    build:
      context: ./eurekaServiceDiscovery
      dockerfile: Dockerfile
    ports:
      - "${EUREKA_SERVER_PORT}:${EUREKA_SERVER_PORT}"
    environment:
      EUREKA_SERVER_PORT: ${EUREKA_SERVER_PORT}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      ZIPKIN_SERVER_URL: ${ZIPKIN_SERVER_URL}
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${EUREKA_SERVER_PORT}/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  notifications-application:
    build:
      context: ./notificationsApplication
      dockerfile: Dockerfile
    ports:
      - "${NOTIFICATIONS_SERVER_PORT}:${NOTIFICATIONS_SERVER_PORT}"
    environment:
      DATASOURCE_URL: ${DATASOURCE_URL}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      NOTIFICATIONS_SERVER_PORT: ${NOTIFICATIONS_SERVER_PORT}
      EUREKA_SERVER_PORT: ${EUREKA_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      ZIPKIN_SERVER_URL: ${ZIPKIN_SERVER_URL}
    depends_on:
      configserver:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - app-network

  accounts-application:
    build:
      context: ./accountsApplication
      dockerfile: Dockerfile
    ports:
      - "${ACCOUNTS_SERVER_PORT}:${ACCOUNTS_SERVER_PORT}"
    environment:
      DATASOURCE_URL: ${DATASOURCE_URL}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      ACCOUNTS_SERVER_PORT: ${ACCOUNTS_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      ZIPKIN_SERVER_URL: ${ZIPKIN_SERVER_URL}
    depends_on:
      configserver:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - app-network

  bank-ui-application:
    build:
      context: ./bankUIApplication
      dockerfile: Dockerfile
    ports:
      - "${BANK_UI_SERVER_PORT}:${BANK_UI_SERVER_PORT}"
    environment:
      BANK_UI_SERVER_PORT: ${BANK_UI_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      ZIPKIN_SERVER_URL: ${ZIPKIN_SERVER_URL}
    depends_on:
      configserver:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - app-network

  blocker-application:
    build:
      context: ./blockerApplication
      dockerfile: Dockerfile
    ports:
      - "${BLOCKER_SERVER_PORT}:${BLOCKER_SERVER_PORT}"
    environment:
      BLOCKER_SERVER_PORT: ${BLOCKER_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      ZIPKIN_SERVER_URL: ${ZIPKIN_SERVER_URL}
    depends_on:
      configserver:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - app-network

  exchange-application:
    build:
      context: ./exchangeApplication
      dockerfile: Dockerfile
    ports:
      - "${EXCHANGE_SERVER_PORT}:${EXCHANGE_SERVER_PORT}"
    environment:
      DATASOURCE_URL: ${DATASOURCE_URL}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      EXCHANGE_SERVER_PORT: ${EXCHANGE_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      ZIPKIN_SERVER_URL: ${ZIPKIN_SERVER_URL}
    depends_on:
      configserver:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - app-network

  exchange-generator-application:
    build:
      context: ./exchangeGeneratorApplication
      dockerfile: Dockerfile
    ports:
      - "${EXCHANGE_GENEGATOR_SERVER_PORT}:${EXCHANGE_GENEGATOR_SERVER_PORT}"
    environment:
      EXCHANGE_GENEGATOR_SERVER_PORT: ${EXCHANGE_GENEGATOR_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      ZIPKIN_SERVER_URL: ${ZIPKIN_SERVER_URL}
    depends_on:
      configserver:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - app-network

  cash-application:
    build:
      context: ./cashApplication
      dockerfile: Dockerfile
    ports:
      - "${CASH_SERVER_PORT}:${CASH_SERVER_PORT}"
    environment:
      CASH_SERVER_PORT: ${CASH_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      ZIPKIN_SERVER_URL: ${ZIPKIN_SERVER_URL}
    depends_on:
      configserver:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - app-network

  transfer-application:
    build:
      context: ./transferApplication
      dockerfile: Dockerfile
    ports:
      - "${TRANSFER_SERVER_PORT}:${TRANSFER_SERVER_PORT}"
    environment:
      TRANSFER_SERVER_PORT: ${TRANSFER_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      ZIPKIN_SERVER_URL: ${ZIPKIN_SERVER_URL}
    depends_on:
      configserver:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - app-network

  gateway-service:
    build:
      context: ./gatewayService
      dockerfile: Dockerfile
    ports:
      - "${GATEWAY_SERVER_PORT}:${GATEWAY_SERVER_PORT}"
    environment:
      GATEWAY_SERVER_PORT: ${GATEWAY_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      ZIPKIN_SERVER_URL: ${ZIPKIN_SERVER_URL}
    depends_on:
      configserver:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - app-network

  postgres-db:
    image: postgres
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${DATASOURCE_PASSWORD}
      POSTGRES_DB: ${DATASOURCE_DB}
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATASOURCE_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: keycloak
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HOSTNAME: localhost
      KC_HTTP_ENABLED: "true"
    volumes:
      - ./realm-config.json:/opt/keycloak/data/import/realm-config.json
    ports:
      - "8282:8080" # Порт Keycloak изменен на 8282
    networks:
      - app-network
    command:
      - start-dev --import-realm

  kafka:
    image: bitnami/kafka
    container_name: kafka
    hostname: yandex.kafka.ru
    ports:
      - "9092:9092"
      - "9093:9093"
    expose:
      - "9093"
    env_file:
      - ./kafka/kafka.env
    volumes:
      - ./kafka/server.properties:/opt/bitnami/kafka/config/server.properties
      - ./kafka/producer.properties:/opt/bitnami/kafka/config/producer.properties
      - ./kafka/consumer.properties:/opt/bitnami/kafka/config/consumer.properties
    networks:
      - app-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    ports:
      - "8072:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
    networks:
      - app-network

  zipkin:
    image: openzipkin/zipkin:3.5
    container_name: zipkin
    ports:
      - "9411:9411"  # порт для UI и API Zipkin
    environment:
      STORAGE_TYPE: mem
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPIC: zipkin
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus:/etc/prometheus/
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    user: root
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - app-network


  logstash:
    image: docker.io/elastic/logstash:8.13.3
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOSTS}
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    depends_on:
      - kafka
      - elasticsearch
    networks:
      - app-network


  elasticsearch:
    image: docker.io/elastic/elasticsearch:8.13.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./.elasticsearch/data:/usr/share/elasticsearch/data
      - ./.elasticsearch/logs:/usr/share/elasticsearch/logs
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticsearch/templates:/usr/share/elasticsearch/config/elasticsearch/templates
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:9200 | grep -q 'yabank-cluster'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  setup-elasticsearch:
    image: curlimages/curl
    depends_on:
      elasticsearch:
        condition: service_healthy
    command:
      - sh
      - -c
      - |
        echo "Applying index template..."
        curl -X PUT "http://elasticsearch:9200/_index_template/logs_template" -H 'Content-Type: application/json' -d @/templates/logs-template.json
    volumes:
      - ./elasticsearch/templates:/templates
    networks:
      - app-network


  kibana:
    image: docker.io/elastic/kibana:8.13.3
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOSTS}
    networks:
      - app-network


networks:
  app-network:
    driver: bridge
    external: true
volumes:
  redis_data:
  db-data:
  keycloak-data:
  grafana:
  prometheus:
  zipkin:
  kibana:
  elasticsearch:
  logstash: